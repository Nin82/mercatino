// Nome della cache (importante cambiarlo per ogni aggiornamento maggiore dei file statici)
const CACHE_NAME = 'contabilita-v1';

// File essenziali per il funzionamento offline
const urlsToCache = [
  '/',
  '/index.html',
  '/manifest.json',
  // Risorse importanti
  'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2', // CDN Supabase
  // I tuoi asset locali
  '/images/icon1.jpg', 
  '/images/icon2.jpg' 
];

// 1. Installazione del Service Worker: Apre la cache e scarica i file essenziali
self.addEventListener('install', event => {
  console.log('[Service Worker] Installazione. Caching shell app...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        return cache.addAll(urlsToCache);
      })
      .catch(err => {
        console.error('[Service Worker] Errore durante il caching:', err);
      })
  );
  self.skipWaiting(); // Forza l'attivazione immediata
});

// 2. Attivazione del Service Worker: Pulisce le vecchie cache
self.addEventListener('activate', event => {
  console.log('[Service Worker] Attivato. Pulizia vecchie cache...');
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.filter(cacheName => {
          // Rimuove tutte le cache che non corrispondono al nome corrente
          return cacheName !== CACHE_NAME;
        }).map(cacheName => {
          return caches.delete(cacheName);
        })
      );
    })
  );
  return self.clients.claim(); // Prende il controllo subito
});

// 3. Strategia di Fetch: Cache, then Network (per i file statici)
// Network, then Cache (per le chiamate API Supabase)
self.addEventListener('fetch', event => {
  const requestUrl = new URL(event.request.url);

  // Strategia per le risorse Supabase (Database/API): Network Only
  // Vogliamo sempre il dato più aggiornato dal server
  if (requestUrl.host.includes('supabase.co') || requestUrl.host.includes('functions.supabase.co')) {
    event.respondWith(fetch(event.request).catch(function() {
        // Se la rete è offline e non è un asset statico, non tentiamo la cache
        return new Response("Sei offline. Impossibile caricare i dati in tempo reale.");
    }));
    return;
  }

  // Strategia per gli assets statici (HTML, CSS, JS, Immagini): Cache First
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // Se l'asset è in cache, lo restituisce subito
        if (response) {
          return response;
        }
        // Altrimenti, va in rete e aggiunge l'asset alla cache per la prossima volta
        return fetch(event.request).then(
          response => {
            // Controlla se abbiamo ricevuto una risposta valida
            if(!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }
            // Clona la risposta perché il corpo può essere letto una sola volta
            const responseToCache = response.clone();
            caches.open(CACHE_NAME)
              .then(cache => {
                cache.put(event.request, responseToCache);
              });
            return response;
          }
        );
      })
  );
});