// sw.js
const CACHE_NAME = 'contabilita-v1';

// File essenziali per il funzionamento offline
const urlsToCache = [
    '/',
    '/index.html',
    '/manifest.json',
    'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2', // CDN Supabase
    // Aggiungi qui gli altri asset statici, se presenti (es. immagini/icona.png)
    '/images/icon1.jpg', 
    '/images/icon2.jpg' 
];

// Installazione: Caching degli asset
self.addEventListener('install', event => {
    console.log('[SW] Installazione. Caching shell app...');
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(cache => cache.addAll(urlsToCache))
            .catch(err => console.error('[SW] Errore caching:', err))
    );
    self.skipWaiting();
});

// Attivazione: Pulizia vecchie cache
self.addEventListener('activate', event => {
    console.log('[SW] Attivato. Pulizia vecchie cache...');
    const cacheWhitelist = [CACHE_NAME];
    event.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.filter(name => cacheWhitelist.indexOf(name) === -1)
                          .map(name => caches.delete(name))
            );
        })
    );
    return self.clients.claim();
});

// Fetch: Strategia Cache First per i file statici, Network Only per le API
self.addEventListener('fetch', event => {
    const requestUrl = new URL(event.request.url);
    const isSupabaseApi = requestUrl.host.includes('supabase.co') && requestUrl.pathname.includes('/rest/v1/');

    // Se Ã¨ una chiamata API di Supabase, usa la rete (Network Only)
    if (isSupabaseApi) {
        // Lasciamo la richiesta andare e fallire (il catch sarÃ  nell'HTML/JS)
        return; 
    }

    // Per tutto il resto (asset statici): Cache First
    event.respondWith(
        caches.match(event.request)
            .then(response => response || fetch(event.request))
    );
});
